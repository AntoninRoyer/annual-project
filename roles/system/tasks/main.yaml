---
# Partitionning
- name: Get the UUID of /boot partition
  command: findmnt -no UUID /boot
  register: boot_uuid

- name: Ensure /boot partition in /etc/fstab has noauto option
  lineinfile:
    path: /etc/fstab
    regexp: '^(UUID={{ boot_uuid.stdout }}\s+/boot\s+xfs\s+)(.*)'
    line: 'UUID={{ boot_uuid.stdout }} /boot xfs noauto,\2'
    backrefs: yes

- name: Reload systemd to apply changes
  command: systemctl daemon-reload

- name: Ensure /boot is mounted as needed (optional)
  mount:
    path: /boot
    src: UUID={{ boot_uuid.stdout }}
    fstype: xfs
    opts: defaults
    state: mounted
  when: ansible_facts.mounts | selectattr('mount', '==', '/boot') | list | length == 0

- name: Set correct permissions on /boot
  file:
    path: /boot
    owner: root
    group: root
    mode: '0700'

#  Accounts
## Remove unused user accounts
- name: Find users inactive for more than {{ inactivity_days }} days
  shell: |
    lastlog -b {{ inactivity_days }} | awk '{if (NR>1) print $1}' | grep -v -E '{{ excluded_users | join("|") }}' || true
  register: inactive_users
  ignore_errors: yes

- name: Exclude users with running processes
  shell: |
    for user in {{ inactive_users.stdout_lines | join(" ") }}; do
      if ps -U $user > /dev/null 2>&1; then
        echo $user
      fi
    done
  register: users_with_processes

- name: Filter out users with running processes from the removal list
  set_fact:
    final_users_to_remove: "{{ inactive_users.stdout_lines | difference(users_with_processes.stdout_lines) }}"

- name: Debug list of final users to remove
  debug:
    msg: "{{ final_users_to_remove }}"

- name: Remove inactive users
  user:
    name: "{{ item }}"
    state: absent
    remove: yes  # Supprimer également le répertoire home de l'utilisateur
  loop: "{{ final_users_to_remove }}"
  when: final_users_to_remove is defined and final_users_to_remove|length > 0
## Userpassword strength
- name: Ensure password policies are enforced
  lineinfile:
    path: /etc/pam.d/system-auth
    regexp: '^password\s+requisite\s+pam_pwquality\.so'
    line: 'password requisite pam_pwquality.so retry=3 minlen=12 dcredit=-1 ucredit=-1 ocredit=-1 lcredit=-1'
  notify: reload_pam

- name: Ensure password reuse is restricted
  lineinfile:
    path: /etc/pam.d/system-auth
    regexp: '^password\s+sufficient\s+pam_unix\.so'
    line: 'password sufficient pam_unix.so sha512 shadow try_first_pass use_authtok remember=5'
  notify: reload_pam

## Configuring a timeout on local user sessions, to check : "echo $TMOUT"
- name: Ensure vlock is installed
  yum:
    name: vlock
    state: present

- name: Set TMOUT for CLI sessions in /etc/profile
  lineinfile:
    path: /etc/profile
    line: "export TMOUT={{ inactivity_timeout }}; readonly TMOUT; export LOCK_TTY=1"
    create: yes
    state: present

# ## Ensuring the imputability of administration actions
- name: Configure sudo for admin users
  copy:
    dest: "{{ sudoers_file }}"
    content: |
      # Sudo configuration for admin users
      %wheel ALL=(ALL) NOPASSWD: ALL
    mode: '0440'
  notify:
    - Validate sudoers configuration

- name: Disable root account
  user:
    name: root
    shell: /sbin/nologin

- name: Set auditd rules to log all process creations
  copy:
    dest: "{{ auditd_rules_file }}"
    content: |
      -a exit,always -F arch=b64 -S execve,execveat
      -a exit,always -F arch=b32 -S execve,execveat
  notify:
    - Reload auditd rules

# ## Services accounts
- name: "Disable shell access for service accounts"
  user:
    name: "{{ item.name }}"
    shell: "{{ item.shell }}"
  loop: "{{ service_accounts }}"
  when: item.action is not defined or item.action != 'disable'

- name: Ensure 'nobody' account is not used by multiple services
  shell: |
    for service in $(ps -eo user,comm | grep nobody | awk '{print $2}' | uniq); do
      echo "Service $service is using the nobody account. Consider configuring a unique user for it."
    done
  when: item.name == 'nobody'
  loop: "{{ service_accounts }}"

- name: Disable 'nobody' account from opening a shell
  user:
    name: nobody
    shell: /sbin/nologin


# ## Access Control
- name: S'assurer que la valeur umask est définie dans /etc/profile
  lineinfile:
    path: /etc/profile
    regexp: '^umask'
    line: 'umask 027'
    state: present
  notify: Reload profile

- name: Assurer que le groupe 'wheel' existe (groupe par défaut pour sudo sur RHEL/AlmaLinux)
  group:
    name: wheel
    state: present

- name: Restreindre l'accès à sudo aux seuls membres du groupe wheel
  lineinfile:
    path: /etc/sudoers
    regexp: '^%wheel'
    line: '%wheel ALL=(ALL) ALL'
    state: present
    validate: 'visudo -cf %s'

- name: Désactiver l'utilisation générale de sudo pour tous les utilisateurs sauf le groupe wheel
  lineinfile:
    path: /etc/sudoers
    regexp: '^Defaults\s+env_reset'
    line: 'Defaults env_reset, !targetpw, !rootpw, !runaspw'
    state: present
    validate: 'visudo -cf %s'

- name: Sécuriser les paramètres de sudo pour réduire les risques (requiretty)
  lineinfile:
    path: /etc/sudoers
    regexp: '^Defaults\s+requiretty'
    line: 'Defaults requiretty'
    state: present
    validate: 'visudo -cf %s'

- name: Configurer un fichier de log pour sudo
  lineinfile:
    path: /etc/sudoers
    regexp: '^Defaults\s+logfile'
    line: 'Defaults logfile="/var/log/sudo.log"'
    state: present
    validate: 'visudo -cf %s'

# # - name: Vérifier les permissions et durcir le binaire sudo
# #   file:
# #     path: /usr/bin/sudo
# #     owner: root
# #     group: root
# #     mode: '4750'


- name: Créer un utilisateur non privilégié
  user:
    name: "unprivileged_user"
    shell: /bin/bash
    groups: "users"
    state: present

- name: Associer l'utilisateur non privilégié à l'utilisateur SELinux confiné
  shell: semanage login -a -s user_u unprivileged_user
  ignore_errors: yes

- name: Vérifier et configurer un booléen SELinux
  seboolean:
    name: httpd_can_network_connect
    state: true
    persistent: yes

- name: Activer deny_execmem (Prévenir l'exécution de segments de mémoire marqués comme writable)
  seboolean:
    name: deny_execmem
    state: true
    persistent: yes

- name: Désactiver selinuxuser_execstack (Prévenir l'exécution de la pile pour les utilisateurs SELinux)
  seboolean:
    name: selinuxuser_execstack
    state: false
    persistent: yes

# - name: Activer secure_mode_insmod (Prévenir le chargement dynamique de modules par les processus)
#   seboolean:
#     name: secure_mode_insmod
#     state: true
#     persistent: yes

- name: Désactiver ssh_sysadm_login (Empêcher les connexions SSH d'accéder directement au rôle sysadmin)
  seboolean:
    name: ssh_sysadm_login
    state: false
    persistent: yes

- name: Désactiver xserver_execmem (Prévenir l'exécution de mémoire dans le serveur X)
  seboolean:
    name: xserver_execmem
    state: false
    persistent: yes

- name: Désactiver le service setroubleshootd
  service:
    name: setroubleshootd
    state: stopped
    enabled: no
  ignore_errors: yes

- name: Désinstaller le paquet setroubleshoot
  package:
    name: setroubleshoot
    state: absent
  ignore_errors: yes

- name: Désinstaller le paquet setroubleshoot-server
  package:
    name: setroubleshoot-server
    state: absent
  ignore_errors: yes

- name: Désinstaller le paquet setroubleshoot-plugins
  package:
    name: setroubleshoot-plugins
    state: absent
  ignore_errors: yes

#  Files permissions
- name: Exécuter la commande find pour les fichiers sans utilisateur ou groupe
  shell: find / -type f \( -nouser -o -nogroup \) -ls 2>/dev/null
  register: find_output
  failed_when: find_output.rc != 0 and find_output.stdout != ""

- name: Afficher les résultats de la commande find
  debug:
    msg: "{{ find_output.stdout_lines }}"
  when: find_output.stdout_lines | length > 0

- name: Lister les répertoires modifiables par tous sans sticky bit
  shell: find / -type d \( -perm -0002 -a \! -perm -1000 \) -ls 2>/dev/null
  register: dirs_without_sticky_bit
  failed_when: dirs_without_sticky_bit.rc != 0 and dirs_without_sticky_bit.stdout != ""

- name: Afficher les répertoires sans sticky bit trouvés
  debug:
    msg: "{{ dirs_without_sticky_bit.stdout_lines }}"
  when: dirs_without_sticky_bit.stdout_lines | length > 0

- name: Lister les répertoires modifiables par tous dont le propriétaire n'est pas root
  shell: find / -type d -perm -0002 -a \! -uid 0 -ls 2>/dev/null
  register: dirs_not_owned_by_root
  failed_when: dirs_not_owned_by_root.rc != 0 and dirs_not_owned_by_root.stdout != ""

- name: Afficher les répertoires non possédés par root trouvés
  debug:
    msg: "{{ dirs_not_owned_by_root.stdout_lines }}"
  when: dirs_not_owned_by_root.stdout_lines | length > 0

- name: Lister les fichiers éditables par tout le monde, en excluant /proc et /sys
  shell: find / -path /proc -prune -o -path /sys -prune -o -type f -perm -0002 -ls 2>/dev/null
  register: world_writable_files
  failed_when: world_writable_files.rc != 0 and world_writable_files.stdout != ""

- name: Afficher les fichiers éditables par tout le monde
  debug:
    msg: "{{ world_writable_files.stdout_lines }}"
  when: world_writable_files.stdout_lines | length > 0


- name: Lister les exécutables avec setuid ou setgid
  shell: find / -type f \( -perm -4000 -o -perm -2000 \) -ls 2>/dev/null
  register: suid_sgid_files
  failed_when: suid_sgid_files.rc != 0 and suid_sgid_files.stdout == ""
  changed_when: suid_sgid_files.stdout != ""

- name: Afficher les exécutables avec setuid ou setgid
  debug:
    msg: "{{ suid_sgid_files.stdout_lines }}"
  when: suid_sgid_files.stdout_lines | length > 0

- name: Lister les fichiers avec setuid ou setgid (perm /6000)
  shell: find / -type f -perm /6000 -ls 2>/dev/null
  register: suid_sgid_files_6000
  failed_when: suid_sgid_files_6000.rc != 0 and suid_sgid_files_6000.stdout == ""
  changed_when: suid_sgid_files_6000.stdout != ""

- name: Afficher les fichiers avec setuid ou setgid trouvés
  debug:
    msg: "{{ suid_sgid_files_6000.stdout_lines }}"
  when: suid_sgid_files_6000.stdout_lines | length > 0


# - name: echo to notify
#   command: echo "Rebooting after updating GRUB configuration and unified kernel image."
#   notify:
#     - reboot

