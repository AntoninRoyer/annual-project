---
- name: Disabling and stopping the non-necessary services
  ansible.builtin.systemd:
    name: "{{ item }}"
    enabled: false
    state: stopped
  loop: "{{ services_list }}"


- name: "Disabling non-essential features of services"
  community.general.capabilities:
    path: "{{ item.key }}"
    state: absent
    capability: "{{ item.value }}"
  loop: "{{ capabilities_map | dict2items }}"

# # - name: "Configuring the privileges of the services"

# # - name: "Partitioning the services"

# # - name: "Hardening the partitioning components"

# TODO: find the problematic PAM
# Limit the elevation to root via su to the members of the group 'wheel ' only part 1
- name: "Secure remote authentication with PAM 1"
  ansible.builtin.template:
    src: su.j2
    dest: /etc/pam.d/su
    owner: root
    group: wheel
    mode: '0644'


# # # Limit the elevation to root via su to the members of the group 'wheel ' only part 2
- name: "Secure remote authentication with PAM 2"
  ansible.builtin.template:
    src: su-l.j2
    dest: /etc/pam.d/su-l
    owner: root
    group: wheel
    mode: '0644'


# # # At least 12 characters of 3 different classes among the uppercase letters ,
# # # lowercase letters , numbers and others by prohibiting repetition
# # # of a character
- name: "Secure remote authentication with PAM 3"
  ansible.builtin.template:
    src: passwd.j2
    dest: /etc/pam.d/passwd
    owner: root
    group: wheel
    mode: '0644'

# #Account blocking for 5 min after 3 failures part 1
- name: "Secure remote authentication with PAM 4"
  ansible.builtin.template:
    src: login.j2
    dest: /etc/pam.d/login
    owner: root
    group: wheel
    mode: '0644'

# # #Account blocking for 5 min after 3 failures part 2
- name: "Secure remote authentication with PAM 5"
  ansible.builtin.template:
    src: sshd.j2
    dest: /etc/pam.d/sshd
    owner: root
    group: wheel
    mode: '0644'


- name: "Protecting the stored passwords"
  ansible.builtin.lineinfile:
      path: /etc/login.defs
      regexp: '^ENCRYPT_METHOD'
      line: 'ENCRYPT_METHOD SHA512'
      state: present

- name: Configure PAM for strong hashing in system-auth
  ansible.builtin.lineinfile:
    path: /etc/pam.d/system-auth
    regexp: '^password.*pam_unix.so'
    line: 'password    sufficient    pam_unix.so sha512 shadow try_first_pass use_authtok'
    state: present

# - name: Configure PAM for strong hashing in password-auth
  ansible.builtin.lineinfile:
    path: /etc/pam.d/password-auth
    regexp: '^password.*pam_unix.so'
    line: 'password    sufficient    pam_unix.so sha512 shadow try_first_pass use_authtok'
    state: present

- name: Configure password quality policies
  ansible.builtin.lineinfile:
    path: /etc/security/pwquality.conf
    regexp: '^minlen'
    line: 'minlen = 7'
    state: present

- name: Configure password aging policies
  ansible.builtin.lineinfile:
    path: /etc/login.defs
    regexp: '^PASS_MAX_DAYS'
    line: 'PASS_MAX_DAYS 90'
    state: present

- name: Restrict access to /etc/shadow
  ansible.builtin.file:
    path: /etc/shadow
    owner: root
    group: wheel
    mode: '0600'

- name: Install and configure auditd
  ansible.builtin.dnf:
    name: 
      - audit
      - audit-libs
    state: present

- name: Add audit rules for password file monitoring
  ansible.builtin.blockinfile:
    path: /etc/audit/rules.d/audit.rules
    block: |
      -w /etc/shadow -p wa -k passwd_changes
      -w /etc/passwd -p wa -k passwd_changes

- name: "Securing access to remote user databases"
  ansible.builtin.dnf:
    name:
      - sssd
      - sssd-client
    state: present

- name: "Separating the system accounts and directory administrator"
  ansible.builtin.template:
    src: sssd.conf.j2
    dest: /etc/sssd/sssd.conf
    owner: root
    group: wheel
    mode: '0600'


- name: Configure NSS to use SSSD
  ansible.builtin.lineinfile:
    path: /etc/nsswitch.conf
    regexp: '^passwd:'
    line: 'passwd:     files sss'
    state: present

- name: Secure SSSD configuration
  ansible.builtin.file:
    path: /etc/sssd/sssd.conf
    owner: root
    group: wheel
    mode: '0600'

# # - name: "Implementing a logging system"
- name: Install rsyslog
  ansible.builtin.dnf:
    name: rsyslog
    state: present

- name: Configure rsyslog for local loggin only
  ansible.builtin.lineinfile:
    path: /etc/rsyslog.conf
    regexp: '^\$ModLoad imtcp'
    line: '# $ModLoad imtcp' # Disable TCP input
    state: present

- name: Secure log file permissions
  ansible.builtin.blockinfile:
    path: /etc/rsyslog.conf
    block: |
      $FileOwner syslog
      $FileGroup adm
      $FileCreateMode 0640

- name: Apply SELinux context for log files
  ansible.builtin.command: >
    semanage fcontext -a -t var_log_t "/var/log/service_name.log"

# - name: "Sealing and checking files integrity"

- name: Configure log rotations for syslog
  ansible.builtin.copy:
    dest: /etc/logrotate.d/syslog
    content: |
      /var/log/syslog
      {
          rotate 7
          daily
          missingok
          notifempty
          compress
          delaycompress
          sharedscripts
          postrotate
              /usr/bin/systemctl reload rsyslog > /dev/null 2>&1 || true
          endscript
      }

# - name: "Implementing dedicated service activity journals"
- name: Configure rsyslog for dedicated service logs
  ansible.builtin.blockinfile:
    path: /etc/rsyslog.conf
    block: | 
      if $programname == 'sshd' then /var/log/services/sshd.log
      & stop
      if $programname == 'sssd' then /var/log/services/sshd.log
      & stop

- name: create syslog group
  ansible.builtin.group:
    name: "syslog"
    state: present

- name: create syslog user
  ansible.builtin.user:
    name: "syslog"
    groups: "syslog"
    state: present
  
- name: Create log directories
  ansible.builtin.file:
    path: /var/log/services
    state: directory
    owner: syslog
    group: syslog
    mode: '0750'

- name: Create log files
  ansible.builtin.file:
    path: "/var/log/services/{{ item }}.log"
    state: touch
    owner: syslog
    group: syslog
    mode: '0640'
  loop:
    - sshd
    - sssd


# - name: "Logging the system activity with auditd"
- name: Configure audit rules
  ansible.builtin.copy:
    dest: /etc/audit/rules.d/audit.rules
    content: |
      # Run of insmod, rmmod, and modprobe
      -w /sbin/insmod -p x
      -w /sbin/modprobe -p x
      -w /sbin/rmmod -p x
      # On recent GNU / Linux distributions, insmod, rmmod and modprobe are symbolic links of kmod
      -w /bin/kmod -p x
      # Log changes in /etc/
      -w /etc/ -p wa
      # Mounting / unmounting monitoring
      -a exit,always -S mount -S umount2
      # Suspicious x86 syscalls calls
      -a exit,always -F arch=b32 -S ioperm -S modify_ldt
      # Syscalls calls that must be rare and closely monitored
      -a exit,always -F arch=b64 -S get_kernel_syms -S ptrace
      -a exit,always -F arch=b64 -S prctl
      # Added monitoring for creating or deleting files
      -a exit,always -F arch=b64 -S unlink -S rmdir -S rename
      -a exit,always -F arch=b64 -S creat -S open -S openat -F exit=-EACCES
      -a exit,always -F arch=b64 -S truncate -S ftruncate -F exit=-EACCES
      # Added monitoring for loading, changing and unloading kernel modules
      -a exit,always -F arch=b64 -S init_module -S delete_module
      -a exit,always -F arch=b64 -S finit_module
      # Locking the auditd configuration
      -e 2
      -w /etc/ssh/sshd_config -p wa -k sshd_config_change
      -w /etc/passwd -p rwxa -k passwd_changes
      -a always,exit -F arch=b64 -S init_module -S delete_module -k module_insertion
      -a always,exit -F arch=b64 -S all -F auid>=1000 -F auid!=4294967295 -k syscall_monitor

- name: Reload audit rules
  ansible.builtin.command: augenrules --load
  register: reload_audit_output
  changed_when: "'No rules' not in reload_audit_output.stdout"

- name: Restart rsyslog
  ansible.builtin.service:
    name: rsyslog
    state: restarted

- name: Apply SELinux context for log files
  ansible.builtin.command: >
    semanage fcontext -a -t var_log_t "/var/log/services(/.*)?"

- name: Restore SELinux context on log directory
  ansible.builtin.command: restorecon -Rv /var/log/services

# - name: "Hardening the local messaging service"

- name: Install sendmail
  ansible.builtin.dnf:
    name: sendmail

- name: Configure sendmail for local delivery only
  ansible.builtin.template:
    src: sendmail.mc.j2
    dest: /etc/mail/sendmail.mc
    owner: root
    group: wheel
    mode: '0664'

- name: Rebuild sendmail configuration
  ansible.builtin.command:
    cmd: m4 /etc/mail/sendmail.mc > /etc/mail/sendmail.cf
    creates: /etc/mail/sendmail.cf

- name: Set up mail aliases
  ansible.builtin.lineinfile:
    path: /etc/aliases
    regexp: '^root:'
    line: 'root: youradmin@example.com' #replace with your admin email
    create: yes

- name: "Configuring aliases for service accounts"
  ansible.builtin.command: newaliases

# - name : Sealing and checking files integrity
- name: Apply file integrity monitoring with AIDE
  ansible.builtin.dnf:
    name: aide
    state: present

- name: Ensure /etc/aide directory exists
  ansible.builtin.file:
    path: /etc/aide
    state: directory
    owner: root
    group: wheel
    mode: '0755'

- name: Configure AIDE
  ansible.builtin.template:
    src: aide.conf.j2
    dest: /etc/aide/aide.conf
    owner: root
    group: wheel
    mode: '0644'

- name: Ensure the key directory exists
  ansible.builtin.file:
    path: /etc/sealing
    state: directory
    mode: '0700'

- name: Ensure Python pip is installed
  ansible.builtin.dnf:
    name: python3-pip
    state: present

- name: Install cryptography module
  ansible.builtin.pip:
    name: cryptography
    state: present

- name: Generate private key
  community.crypto.openssl_privatekey:
    path: "{{ private_key_path }}"
    size: 4096

- name: Generate a public key
  ansible.builtin.openssl_publickey:
    path: "{{ public_key_path }}"
    privatekey_path: "{{ private_key_path }}"
    state: present

- name: Initialise AIDE database
  ansible.builtin.command:
    cmd: aide --init

- name : Rename AIDE database
  ansible.builtin.command:
    cmd: mv /var/lib/aide/aide.db.new.gz /var/lib/aide/aide.db.gz

- name: Sign the AIDE Database
  ansible.builtin.command:
    cmd: openssl dgst -sha256 -sign "{{ private_key_path }}" -out "{{ aide_db_sig_path }}" "{{ aide_db_path }}"
    creates: "{{ aide_db_sig_path }}"

- name: Create cron job for AIDE check
  ansible.builtin.cron:
    name: "Daily AIDE Integrity Check"
    minute: "0"
    hour: "1"
    job: "/usr/sbin/aide --check | mail -s 'AIDE Integrity Check Report' root"

- name: Secure AIDE private key
  ansible.builtin.file:
    path: "{{ private_key_path }}"
    owner: root
    group: wheel
    mode: '0400'
    state: file

- name: Remove unecessary packages
  ansible.builtin.dnf:
    name: 
      - telnet
      - ftp
    state: absent